// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.spring.domain;

import com.spring.domain.Color;
import com.spring.domain.Inform;
import com.spring.domain.Type;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Inform_Roo_Finder {
    
    public static Long Inform.countFindInformsByTypeAndColor(Type type, Color color) {
        if (type == null) throw new IllegalArgumentException("The type argument is required");
        if (color == null) throw new IllegalArgumentException("The color argument is required");
        EntityManager em = Inform.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Inform AS o WHERE o.type = :type AND o.color = :color", Long.class);
        q.setParameter("type", type);
        q.setParameter("color", color);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Inform> Inform.findInformsByTypeAndColor(Type type, Color color) {
        if (type == null) throw new IllegalArgumentException("The type argument is required");
        if (color == null) throw new IllegalArgumentException("The color argument is required");
        EntityManager em = Inform.entityManager();
        TypedQuery<Inform> q = em.createQuery("SELECT o FROM Inform AS o WHERE o.type = :type AND o.color = :color", Inform.class);
        q.setParameter("type", type);
        q.setParameter("color", color);
        return q;
    }
    
    public static TypedQuery<Inform> Inform.findInformsByTypeAndColor(Type type, Color color, String sortFieldName, String sortOrder) {
        if (type == null) throw new IllegalArgumentException("The type argument is required");
        if (color == null) throw new IllegalArgumentException("The color argument is required");
        EntityManager em = Inform.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Inform AS o WHERE o.type = :type AND o.color = :color");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Inform> q = em.createQuery(queryBuilder.toString(), Inform.class);
        q.setParameter("type", type);
        q.setParameter("color", color);
        return q;
    }
    
}
